{"version":3,"sources":["Utils/form.js","Utils/degreeToddler.js","Utils/functions.js","Utils/displayWeather.js","Utils/displayForecast.js","Utils/ForecastList.js","Components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getForecast","name","type","onChange","e","setInputText","target","value","placeholder","Toggler","updateForecastDegree","setDegreeType","className","degreeType","class","for","id","checked","convertKelvinToCelsius","k","Math","floor","convertToFahrenheit","cel","DisplayWeather","city","country","icon","temperature","min","max","condition","Fragment","src","DisplayForecast","dt","temp_min","temp_max","main","date","Date","toLocaleDateString","toLocaleTimeString","ForecastList","weathers","console","log","slice","map","weather","key","Forecast","KEY_API","useState","inputText","data","setData","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","api","axios","get","then","response","list","temp","description","preventDefault","err","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.daf5c130.chunk.js","sourcesContent":["import React from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './form.css'\r\nconst Form = (props) => {\r\n\r\n    const inputTextHandler = (e)=>{\r\n        props.setInputText(e.target.value)\r\n    }\r\n    return (\r\n        <form onSubmit={props.getForecast}>\r\n            <input  \r\n                name=\"city\" \r\n                type=\"text\"   \r\n                onChange={inputTextHandler}\r\n                placeholder=\"Search by city...\" />\r\n            <button><SearchIcon /></button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form","import React from 'react'\r\nimport './degreeToddler.css'\r\nconst Toggler =(props)=>{\r\n\r\n    const updateForecastDegree = e => {\r\n        \r\n        props.setDegreeType(e.target.value)\r\n      }\r\n\r\nreturn (\r\n    <div className=\"container\">\r\n        <label className=\"radio radio-gradient\">\r\n            <span className=\"radio-input\">\r\n            <input\r\n            className=\"radio__control\"\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"degree-type\"\r\n            id=\"celsius\"\r\n            value=\"celsius\"\r\n            checked={props.degreeType === \"celsius\"}\r\n            onChange={updateForecastDegree}\r\n            />\r\n           \r\n            </span>\r\n\r\n            <span class=\"radio__label\" for=\"celsius\">Celsius</span>\r\n        </label>\r\n\r\n        <label className=\"radio radio-gradient\">\r\n            <span className=\"radio-input\">\r\n            <input\r\n            class=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"degree-type\"\r\n            id=\"celsius\"\r\n            value=\"fahrenheit\"\r\n            checked={props.degreeType === \"fahrenheit\"}\r\n            onChange={updateForecastDegree}\r\n            />\r\n            \r\n            </span>\r\n\r\n            <span class=\"radio__label\" for=\"fahrenheit\">Fahrenheit</span>\r\n        </label>\r\n    </div>\r\n  )\r\n}\r\nexport default Toggler","export const convertKelvinToCelsius = (k) => {\r\n    var celsius = Math.floor(k-273.15);\r\n    return celsius;\r\n  }\r\n  export const convertToFahrenheit = (k) =>{\r\n    var cel = k - 273;\r\n    var far = Math.floor(cel * (9/5) + 32)\r\n    return far;\r\n  }","import React from 'react'\r\nimport './displayWeather.css'\r\nimport { convertToFahrenheit } from './functions';\r\nimport {  convertKelvinToCelsius } from './functions'\r\n\r\nconst DisplayWeather =({city, country, icon, temperature, min, max, condition , degreeType})=>{\r\n    \r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"name\">\r\n                {city},{country}\r\n            </div>\r\n            <div className=\"weather-icon\"> \r\n                <img src={\"http://openweathermap.org/img/wn/\" + icon + \"@2x.png\"} />\r\n                \r\n            </div>\r\n            <div className=\"weather\">\r\n                <div className=\"main-weather\">\r\n                    <span className=\"temperature\">{degreeType === \"celsius\" ?  convertKelvinToCelsius(temperature) +  \"°C\" : convertToFahrenheit(temperature) + \"°F\"}</span>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"minmax\">\r\n                    \r\n                    Min {degreeType === \"celsius\" ?  convertKelvinToCelsius(min) +  \"°C\" : convertToFahrenheit(min) + \"°F\"} ||\r\n                   \r\n                        Max {degreeType === \"celsius\" ?  convertKelvinToCelsius(max) +  \"°C\" : convertToFahrenheit(max) + \"°F\"} \r\n             \r\n                 || {condition}\r\n            </div>\r\n\r\n           \r\n            \r\n        </React.Fragment>\r\n    )}\r\nexport default DisplayWeather","import React from 'react';\r\nimport { convertToFahrenheit } from './functions';\r\nimport {  convertKelvinToCelsius } from './functions'\r\nimport './displayForecast.css'\r\n\r\nconst DisplayForecast = ({dt, temp_min, temp_max, main, icon, degreeType}) => {\r\n   \r\n  // create a date object with Date class constructor\r\n  const date = new Date(dt);\r\n\r\n  \r\n  return (\r\n    \r\n   <div className=\"card-container\">\r\n\r\n    <div className=\"card\">\r\n      <img className=\"card-img\"\r\n        \r\n        // get the src from example url and pass the icon prop for icon code\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n      />\r\n        <div className=\"card-title\">\r\n          {main}\r\n        </div>\r\n      <div className=\"card-body\">\r\n        {/*  datetime is received in milliseconds, let's turn into local date time */}\r\n        <p>\r\n          {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n        </p>\r\n\r\n        {/* minimum temperature */}\r\n       \r\n        {/* maximum temperature */}\r\n        \r\n\r\n        Min: {degreeType === \"celsius\" ?  convertKelvinToCelsius(temp_min) +  \"°C\" : convertToFahrenheit(temp_min) + \"°F\"}\r\n                    <br /> \r\n        Max: {degreeType === \"celsius\" ?  convertKelvinToCelsius(temp_max) +  \"°C\" : convertToFahrenheit(temp_max) + \"°F\"}\r\n      </div>\r\n    </div>\r\n    </div> \r\n  );\r\n};\r\nexport default DisplayForecast;","import React from 'react'\r\nimport DisplayForecast from './displayForecast'\r\nimport { convertToFahrenheit } from './functions';\r\nimport {  convertKelvinToCelsius } from './functions'\r\nimport '../Components/Forecast.css'\r\nconst ForecastList = ({weathers}) => {\r\n    console.log(\"hooa\" , weathers)\r\n    return (\r\n        <div className=\"main-forecast\">\r\n            \r\n           {weathers \r\n           ? weathers.slice(0,5).map(({dt,main, weather}) => (\r\n              <div key={dt}>\r\n                   \r\n                  <DisplayForecast \r\n                        \r\n                        temp_max={main.temp_max} \r\n                        temp_min={main.temp_min} \r\n                        dt={dt * 1000} \r\n                        main={weather[0].main} \r\n                        icon={weather[0].icon}/>\r\n                        \r\n                        \r\n                </div>\r\n            )\r\n            ):\"not working\"}\r\n        </div>\r\n    )\r\n}\r\nexport default ForecastList","import React ,{useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Form from '../../Utils/form'\r\nimport Toggler from '../../Utils/degreeToddler'\r\nimport DisplayWeather from '../../Utils/displayWeather'\r\nimport ForecastList from '../../Utils/ForecastList'\r\nimport UseFetch from '../../Utils/useFetch'\r\nimport CloudOutlinedIcon from '@material-ui/icons/CloudOutlined';\r\nimport '../Forecast.css'\r\n\r\nimport { convertToFahrenheit } from '../../Utils/functions';\r\nimport { SettingsApplicationsRounded } from '@material-ui/icons'\r\n\r\nconst Forecast = ()=>{\r\n   //const KEY_API='ce06c3f81e1990453b38833c502026cb';\r\n   const KEY_API=\"fd65dfc39c19c48cf92e9b8454d0686d\";\r\n \r\n\r\n    const [inputText, setInputText] = useState('')\r\n    const [data, setData]= useState([])\r\n    const [degreeType, setDegreeType]=useState('fahrenheit')\r\n   \r\n    console.log(\"this is the dataas\", data)\r\n    useEffect(()=> {\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(position =>{\r\n              console.log(\"this is the position\" + position.coords.latitude + position.coords.longitude)\r\n              \r\n                //const api =`https://api.openweathermap.org/data/2.5/weather?lat=${ position.coords.latitude}&lon=${position.coords.longitude}&appid=${KEY_API}`;\r\n                const api =`http://api.openweathermap.org/data/2.5/forecast?lat=${ position.coords.latitude}&lon=${position.coords.longitude}&appid=${KEY_API}`\r\n                axios.get(api)\r\n                .then(response =>{ \r\n                   console.log(response)\r\n                   setData({\r\n                       city: response.data.city.name,\r\n                       country:response.data.city.country,\r\n                       temperature:  response.data.list[0].main.temp,\r\n                       max: response.data.list[0].main.temp_max,\r\n                       min: response.data.list[0].main.temp_min,\r\n                       condition: response.data.list[0].weather[0].description,\r\n                       icon: response.data.list[0].weather[0].icon,\r\n                       list: response.data.list\r\n                    \r\n                    })\r\n                })\r\n            \r\n            })\r\n        }\r\n    }, []);\r\n\r\n    const getForecast = (e) =>{\r\n        e.preventDefault();\r\n\r\n        axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${inputText}&appid=${KEY_API}`)\r\n        .then(response => {\r\n            console.log(\"work please\", response)\r\n            setData({\r\n                    city: response.data.city.name,\r\n                    country:response.data.city.country,\r\n                    temperature:  response.data.list[0].main.temp,\r\n                    max: response.data.list[0].main.temp_max,\r\n                    min: response.data.list[0].main.temp_min,\r\n                    condition: response.data.list[0].description,\r\n                    icon: response.data.list[0].weather[0].icon,\r\n                    list: response.data.list\r\n            })\r\n            \r\n        })\r\n        .then(err => console.log(err))\r\n    } \r\n    \r\n    \r\nreturn (\r\n    <div>\r\n        <div className=\"main-weather\">\r\n        <h1 className=\"header\"> <CloudOutlinedIcon /> Weather App</h1>\r\n        <Form setInputText={setInputText} getForecast={getForecast} />\r\n        <Toggler setDegreeType={setDegreeType} degreeType={degreeType}/>\r\n        <DisplayWeather \r\n            city= {data.city}\r\n            country={data.country}\r\n            temperature={data.temperature}\r\n            max={data.max}\r\n            min={data.min}\r\n            condition={data.condition}\r\n            icon={data.icon}\r\n            degreeType={degreeType}\r\n           \r\n        />\r\n\r\n</div>\r\n\r\n    {data && <ForecastList  className=\"main-forecast\"\r\n        degreeType={degreeType}\r\n        weathers={data.list}\r\n        \r\n    />}\r\n\r\n        \r\n       \r\n    </div>\r\n)}\r\n export default Forecast\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Forecast from './Components/Forecast/Forecast';\nimport ForecastList from './Utils/ForecastList'\nimport UseFetch from './Utils/useFetch';\n\nfunction App() {\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Forecast />\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}